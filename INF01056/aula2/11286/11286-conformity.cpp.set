#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <set>

using namespace std;

set<int> courses;
vector< set<int> > courses_list;
vector<int> counts;
set<int>::iterator it;
int null,froshs,v;
bool already_in_the_set;

int main() {

    while(1) {
        cin >> froshs;
        if (froshs == 0) {
            break;
        }
        else if (froshs == 1) {
            cin >> null >> null >> null >> null >> null;
            printf("1\n");
        }
        else {
            int most_pop_v=1;
            int most_pop_t=1;
            for (int i = 0; i < froshs; i++) {
                counts.push_back(1);
                courses.clear();
                for (int k = 0; k <5; k++) {
                    cin >> v;
                    courses.insert(v);
                }
                if (courses_list.empty()) {
                    courses_list.push_back(courses);
                }
                else {
                    already_in_the_set=false;
                    unsigned int s;
                    s = courses_list.size();
                    //printf("s: %d\n",s);
                    for (unsigned int j = 0; j < s; j++) {
                        if(courses==courses_list[j]) {
                            counts[j]++;
                            already_in_the_set=true;
                            most_pop_t++;
                            if (counts[j] > most_pop_v) {
                                most_pop_v = counts[j];
                                most_pop_t = 1;
                            } 
                            break;
                            //printf ("igual: %d\n",counts[j]);
                        }
                    }
                    if (!already_in_the_set) {
                        courses_list.push_back(courses);
                    }
                }
            }
            //int n = 0;
            //int x = 1;
            //for (unsigned int i = 0; i < counts.size(); i++) { //most popular
            //    if (counts[i] == n) {
            //        x++;
            //    }
            //    if (counts[i] > n) {
            //        n = counts[i];
            //        x = 1;
            //    }
            //}
            if (most_pop_v==1) {
                most_pop_t=froshs;
            }
            //printf("%d\n",x*n);
            printf("%d\n",most_pop_v*most_pop_t);
            counts.clear();
            courses_list.clear();
        }
    }
}
